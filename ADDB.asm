$ADR 0000h		;Адрес начала программы

MVI B,0			;Сброс регистра B
				
			;Инициализация ячеек памяти (массива из 7 элементов)
				
MVI A,103		;Загрузка в аккумулятор 0х67h (0110_0111b)
STA 0B00h		;Запоминание содержимого аккумулятора в памяти по адресу 0B00h
MVI A,47			;Загрузка в аккумулятор 0х2Fh (0010_1111b)
STA 0B01h		;Запоминание содержимого аккумулятора в памяти по адресу 0B01h
MVI A,106		;Загрузка в аккумулятор 0х6Ah (0110_1010b)
STA 0B02h		;Запоминание содержимого аккумулятора в памяти по адресу 0B02h
MVI A,124		;Загрузка в аккумулятор 0х7Ch (0111_1100b)
STA 0B03h		;Запоминание содержимого аккумулятора в памяти по адресу 0B03h
MVI A,88			;Загрузка в аккумулятор 0х58h (0101_1000b)
STA 0B04h		;Запоминание содержимого аккумулятора в памяти по адресу 0B04h
MVI A,117		;Загрузка в аккумулятор 0х75h (0111_0101b)
STA 0B05h		;Запоминание содержимого аккумулятора в памяти по адресу 0B05h
MVI A,19			;Загрузка в аккумулятор 0х13h (0001_0011b)
STA 0B06h		;Запоминание содержимого аккумулятора в памяти по адресу 0B06h

MVI B,7			;Загрузка в регистр B 0х07h (0000_0111b)
LXI D, 0B00h		;Загрузка в регистровую пару D адреса памяти 0B00h

CALL ADDB		;Вызов подпрограммы
JMP END			;Завершение работы программы

ADDB:			;Начало подпрограммы	
MVI A,0			;Сброс аккумулятора 
MVI C,0			;Сброс регистра C
MVI H,0			;Сброс регистра H

LDAX D			;Загрузка в аккумулятор числа из регистровой пары D
BEGSUM:			;Итерация суммирования
MOV H,A			;Передача содержимого аккумулятора в регистр H
INX D			;Инкремент регистровой пары D
DCR B			;Декремент регистра B
JZ ENDSUB		;При равенстве нулю выйти из подпрограммы
LDAX D			;Загрузка в аккумулятор числа из регистровой пары D
ADD H			;Сложение содержимого регистра H с содержимым аккумулятора и сохранение итога в аккумуляторе
JNC BEGSUM		;Если флаг переноса не изменился повторяем итерацию
INR C			;Инкремент регистра С
JMP BEGSUM		;Повторяем итерацию
ENDSUB:			;Метка на возврат из подпрограммы
RET			;Возврат из подпрограммы

END: NOP			;Конец программы
